{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"howdoi \u00b6 Never open your browser to look for help again. Create tar archive: $ howdoi create tar archive > tar -cf backup.tar --exclude \"www/subf3\" www Format a date in bash: $ howdoi format date bash > DATE = ` date +%Y-%m-%d ` Print stack trace in Python: $ howdoi print stack trace python > import traceback > > try: > 1 /0 > except: > print '>>> traceback <<<' > traceback.print_exc () > print '>>> end of traceback <<<' > traceback.print_exc () Convert MP4 to GIF: $ howdoi convert mp4 to animated gif > video = /path/to/video.avi > outdir = /path/to/output.gif > mplayer \" $video \" \\ > -ao null \\ > -ss \"00:01:00\" \\ # starting point > -endpos 10 \\ # duration in second > -vo gif89a:fps = 13 :output = $outdir \\ > -vf scale = 240 :180","title":"howdoi"},{"location":"#howdoi","text":"Never open your browser to look for help again. Create tar archive: $ howdoi create tar archive > tar -cf backup.tar --exclude \"www/subf3\" www Format a date in bash: $ howdoi format date bash > DATE = ` date +%Y-%m-%d ` Print stack trace in Python: $ howdoi print stack trace python > import traceback > > try: > 1 /0 > except: > print '>>> traceback <<<' > traceback.print_exc () > print '>>> end of traceback <<<' > traceback.print_exc () Convert MP4 to GIF: $ howdoi convert mp4 to animated gif > video = /path/to/video.avi > outdir = /path/to/output.gif > mplayer \" $video \" \\ > -ao null \\ > -ss \"00:01:00\" \\ # starting point > -endpos 10 \\ # duration in second > -vo gif89a:fps = 13 :output = $outdir \\ > -vf scale = 240 :180","title":"howdoi"},{"location":"contributing/","text":"General guidelines \u00b6 Be sure to go through these items before creating a new issue: Check the existing issues to see if anyone is already working or have already worken on your issue or a similar one. If there are no current or past issues similar to yours, be sure to give a a complete description when creating it. Wait for feedback on the issue before starting to work. Tip Include instructions on how to reproduce the bug you found or specific use cases of a requested feature. Note Follow Github's guide to collaborating efficiently . Setting up development environment \u00b6 Clone the git repository $ git clone https://github.com/gleitz/howdoi.git Setup and activate a virtual environment $ python3 -m venv .venv $ source .venv/bin/activate Install packages $ pip install -r requirements.txt Running howdoi \u00b6 Run on the command-line python -m howdoi QUERY Note If you try running python howdoi/howdoi.py (without -m ) you might get ValueError: Attempted relative import in non-package . If you want to use howdoi from within a python script, just pass your query to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" output = howdoi . howdoi ( query ) Or parse it yourself and passed the arguments to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" parser = howdoi . get_parser () args = vars ( parser . parse_args ( query . split ( ' ' ))) output = howdoi . howdoi ( args ) Attention Parsing queries yourself is the older way to pass in queries and may be deprecated in the future. Prefer the first example. Submitting Pull Requests \u00b6 Before PRs are accepted they must pass all Travis tests and not have any flake8 or pylint warnings or errors. Testing \u00b6 Howdoi uses python's unittest library for unit testing. Run the unit tests locally $ python -m test_howdoi It's also possible to run only specific tests $ python -m unittest test_howdoi.TestClass.test_method Make sure all tests pass before submitting a PR. Tip Remmember to run the tests while inside the virtual environment (run source .venv/bin/activate to activate it). Linting \u00b6 Run linting locally with flake8 $ flake8 Or pylint $ pylint * Tip Howdoi uses vanilla configuration files for both linters ( .flake8rc and .pylintrc in the root directory), but with a max line length of 119 characters. Documentation \u00b6 To get started building the docs first download mkdocs $ pip install mkdocs-material markdown-include Commands \u00b6 python -m mkdocs new [dir-name] - Create a new project. python -m mkdocs serve - Start the live-reloading docs server. python -m mkdocs build - Build the documentation site. python -m mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Here are some example alerts you can use \u00b6 These are from the Adomonition extension Attention attention alert Caution caution alert Warning warning alert Danger danger alert Error error alert Hint hint alert Important important alert Tip tip alert Note note alert Custom Custom alert Alternatively you can use the !!! type \"Custom Title\" format to get the correct type emoji and use any title you want like so: Tip type alert but with a custom title they're good aren't they Include source code in 1 line of code \u00b6 To import code we can use this syntax inside of a code block with the language label: \"{!path/to/file!}\". Here's ../howdoi/__init__.py { ! ../ howdoi / __init__ . py ! } Here is a choice tab \u00b6 Proper syntax highlighted code blocks in these don't work the way you'd think and I don't know how to get them to work normally without some extension Python To do x in python use this code: def main (): print ( \"Hello world\" ) if __name__ == \"__main__\" : main () Golang To do x in golang use this code: package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) } You can include the contents of a file { ! ../ howdoi / __init__ . py ! }","title":"Contributing"},{"location":"contributing/#general-guidelines","text":"Be sure to go through these items before creating a new issue: Check the existing issues to see if anyone is already working or have already worken on your issue or a similar one. If there are no current or past issues similar to yours, be sure to give a a complete description when creating it. Wait for feedback on the issue before starting to work. Tip Include instructions on how to reproduce the bug you found or specific use cases of a requested feature. Note Follow Github's guide to collaborating efficiently .","title":"General guidelines"},{"location":"contributing/#setting-up-development-environment","text":"Clone the git repository $ git clone https://github.com/gleitz/howdoi.git Setup and activate a virtual environment $ python3 -m venv .venv $ source .venv/bin/activate Install packages $ pip install -r requirements.txt","title":"Setting up development environment"},{"location":"contributing/#running-howdoi","text":"Run on the command-line python -m howdoi QUERY Note If you try running python howdoi/howdoi.py (without -m ) you might get ValueError: Attempted relative import in non-package . If you want to use howdoi from within a python script, just pass your query to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" output = howdoi . howdoi ( query ) Or parse it yourself and passed the arguments to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" parser = howdoi . get_parser () args = vars ( parser . parse_args ( query . split ( ' ' ))) output = howdoi . howdoi ( args ) Attention Parsing queries yourself is the older way to pass in queries and may be deprecated in the future. Prefer the first example.","title":"Running howdoi"},{"location":"contributing/#submitting-pull-requests","text":"Before PRs are accepted they must pass all Travis tests and not have any flake8 or pylint warnings or errors.","title":"Submitting Pull Requests"},{"location":"contributing/#testing","text":"Howdoi uses python's unittest library for unit testing. Run the unit tests locally $ python -m test_howdoi It's also possible to run only specific tests $ python -m unittest test_howdoi.TestClass.test_method Make sure all tests pass before submitting a PR. Tip Remmember to run the tests while inside the virtual environment (run source .venv/bin/activate to activate it).","title":"Testing"},{"location":"contributing/#linting","text":"Run linting locally with flake8 $ flake8 Or pylint $ pylint * Tip Howdoi uses vanilla configuration files for both linters ( .flake8rc and .pylintrc in the root directory), but with a max line length of 119 characters.","title":"Linting"},{"location":"contributing/#documentation","text":"To get started building the docs first download mkdocs $ pip install mkdocs-material markdown-include","title":"Documentation"},{"location":"contributing/#commands","text":"python -m mkdocs new [dir-name] - Create a new project. python -m mkdocs serve - Start the live-reloading docs server. python -m mkdocs build - Build the documentation site. python -m mkdocs help - Print this help message.","title":"Commands"},{"location":"contributing/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"contributing/#here-are-some-example-alerts-you-can-use","text":"These are from the Adomonition extension Attention attention alert Caution caution alert Warning warning alert Danger danger alert Error error alert Hint hint alert Important important alert Tip tip alert Note note alert Custom Custom alert Alternatively you can use the !!! type \"Custom Title\" format to get the correct type emoji and use any title you want like so: Tip type alert but with a custom title they're good aren't they","title":"Here are some example alerts you can use"},{"location":"contributing/#include-source-code-in-1-line-of-code","text":"To import code we can use this syntax inside of a code block with the language label: \"{!path/to/file!}\". Here's ../howdoi/__init__.py { ! ../ howdoi / __init__ . py ! }","title":"Include source code in 1 line of code"},{"location":"contributing/#here-is-a-choice-tab","text":"Proper syntax highlighted code blocks in these don't work the way you'd think and I don't know how to get them to work normally without some extension Python To do x in python use this code: def main (): print ( \"Hello world\" ) if __name__ == \"__main__\" : main () Golang To do x in golang use this code: package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) } You can include the contents of a file { ! ../ howdoi / __init__ . py ! }","title":"Here is a choice tab"},{"location":"contributing_docs/","text":"If you would like to improve the existing documentation, you can do so by using mkdocs . Howdoi uses mkdocs to render its documentation. Steps to contribute to docs: Every step from Contributing to howdoi remains the same with additional requirements of installing and building mkdocs. First, install mkdocs by running the following command: pip install mkdocs You can learn about mkdocs usage from mkdocs documentation . You can propose your documentation by creating a new issue . Once approved in the issue, you can create a PR with modifications to the mkdocs markdown. Next, create a new branch and go to the folder howdoi/docs/ and add a .md file. Go to mkdocs.yml and add the name of your added .md file in nav To see the changes in your local server, go to your terminal and in this directory run : $ mkdocs build $ mkdocs serve Once done, make a PR for the same and wait for it to be reviewed.","title":"Contributing documentation"},{"location":"contributing_to_howdoi/","text":"As beginners, navigating the codebase and finding your way out of the documentation can become difficult. This page will help you understand everything about contributing to howdoi and the best practices in open source as well. You can either contribute code to Howdoi (explained on this page) or contribute documentation (explained on next page) Setting up the development environment \u00b6 Follow the page Setting up the development environment for setting up the development environment for Howdoi. Finding your first issue \u00b6 Go to issues in the howdoi repo . Find the issues which you might be interested to work on. Or, you can also come up with your own ideas of improving howdoi. After finding the issue you are interested in : If the issue is an existing one, comment on the issue and ask for it to be assigned to you. Or, if the issue is unlisted and new , create a new issue and fill every information needed in the issues template provided by howdoi and ask for it to be assigned to you. After receiving confirmation, start working on the issue and whenever and wherever help is needed, comment on the issue itself describing your query in detail. A good guide on how to collaborate efficiently can be found here . Making a Pull request (PR) \u00b6 After you have worked on the issue and fixed it, we need to merge it from your forked repository into the howdoi repository. This is done by making a PR. You can search howdoi create a pull request on Github in your command line and follow the steps written in it. Each PR made should pass all the tests and should not have any flake8 or pylint errors. Github runs tests on each PR but we before that, you should run python setup.py lint which will run pylint and flake8. Once your commit passes all the tests, make a PR and wait for it to be reviewed and merged. Asking for help \u00b6 At times, help is needed while solving the issue. We recommend the following step for asking for help when you get stuck: Read from howdoi docs and howdoi github to see if your answer has already been answered. Comment on the issue you are working describing in detail what problems you are facing. Make sure to write your query in detail and if it is bug, include steps to reproduce it. If you are not working on any issue and have a question to be answered, open a new issue on Github and wait for a reply on it.","title":"Contributing"},{"location":"contributing_to_howdoi/#setting-up-the-development-environment","text":"Follow the page Setting up the development environment for setting up the development environment for Howdoi.","title":"Setting up the development environment"},{"location":"contributing_to_howdoi/#finding-your-first-issue","text":"Go to issues in the howdoi repo . Find the issues which you might be interested to work on. Or, you can also come up with your own ideas of improving howdoi. After finding the issue you are interested in : If the issue is an existing one, comment on the issue and ask for it to be assigned to you. Or, if the issue is unlisted and new , create a new issue and fill every information needed in the issues template provided by howdoi and ask for it to be assigned to you. After receiving confirmation, start working on the issue and whenever and wherever help is needed, comment on the issue itself describing your query in detail. A good guide on how to collaborate efficiently can be found here .","title":"Finding your first issue"},{"location":"contributing_to_howdoi/#making-a-pull-request-pr","text":"After you have worked on the issue and fixed it, we need to merge it from your forked repository into the howdoi repository. This is done by making a PR. You can search howdoi create a pull request on Github in your command line and follow the steps written in it. Each PR made should pass all the tests and should not have any flake8 or pylint errors. Github runs tests on each PR but we before that, you should run python setup.py lint which will run pylint and flake8. Once your commit passes all the tests, make a PR and wait for it to be reviewed and merged.","title":"Making a Pull request (PR)"},{"location":"contributing_to_howdoi/#asking-for-help","text":"At times, help is needed while solving the issue. We recommend the following step for asking for help when you get stuck: Read from howdoi docs and howdoi github to see if your answer has already been answered. Comment on the issue you are working describing in detail what problems you are facing. Make sure to write your query in detail and if it is bug, include steps to reproduce it. If you are not working on any issue and have a question to be answered, open a new issue on Github and wait for a reply on it.","title":"Asking for help"},{"location":"development_env/","text":"Clone the howdoi repository: $ git clone https://github.com/gleitz/howdoi.git To see how to set up the development for Windows, see here . Set up and activate a virtual environment: $ python3 -m venv .venv $ source .venv/bin/activate Install all the required packages: $ pip install -r requirements/dev.txt Running from command line : $ python -m howdoi QUERY From a Python script, you can call howdoi with howdoi.howdoi and pass your query in the argument. from howdoi import howdoi query = \"for loop python\" output = howdoi.howdoi(query) Or, parse it yourself and then pass the arguments: from howdoi import howdoi query = \"for loop python\" parser = howdoi.get_parser() args = vars(parser.parse_args(query.split(' '))) output = howdoi.howdoi(args) Notes \u00b6 Parsing queries yourself is the older way to pass in queries and may be deprecated in the future. Please use the first example. If you try running python howdoi/howdoi.py (without -m) you might get ValueError: Attempted relative import in non-package .","title":"Setting up development environment"},{"location":"development_env/#notes","text":"Parsing queries yourself is the older way to pass in queries and may be deprecated in the future. Please use the first example. If you try running python howdoi/howdoi.py (without -m) you might get ValueError: Attempted relative import in non-package .","title":"Notes"},{"location":"extension_dev/","text":"Extension development \u00b6 You can integrate howdoi as a code editor extension. For this, you need to edit the files within the extension/code-editor-integration folder. To improve the Visual Studio Code howdoi extension, edit the files within the extension/vscode-howdoi folder and republish the extension. How to integrate howdoi as a code editor extension? \u00b6 The Code Editor Integration plug-in runs when you call runHowdoi function which takes in a user\u2019s query(type = string). The parameter is encapsulated by a single line comment and is formatted as : // howdoi query runHowdoi function returns and Object which looks like : { Question: string Answer : string[] Link : string[] } What are these object values? question : it contains the user\u2019s query encapsulated by a single line comment answer : contains the three possible answers to the user\u2019s query. link : link contains the three possible links to the answer encapsulated by a single line comment To start with development, you need to first install howdoi on your machine. Steps to do that lie here. Development \u00b6 Next, install all important packages by running npm install To compile the script, run npm run compile To run the script , run npm start To compile and run the script, run npm run build To run the testing script, run npm test Now, to utilize the plug-in to create a howdoi extension, you need to do the following Integration \u00b6 To use the plug-in to create a howdoi extension, follow these steps: Copy the code-editor-integration folder in your workspace and remove node-modules folder. You can do this by adding the script in your package.json file and running it. But, first you will need to install ncp and rimraf.: \"copy\": \"ncp ../code-editor-integration/ src/code-editor-integration/\" \"clean\": \"rimraf ./src/code-editor-integration/node_modules\" Import the plugin.ts file into your main file. Call the runHowdoi function. Visual Code Extension development \u00b6 To begin the development for Visual Studio Code extension, install all the necessary packages: npm install Then precompile the extension : npm run precompile To run and test extension, utilize the Visual Studio Code\u2019s debugging tools.","title":"Extension development"},{"location":"extension_dev/#extension-development","text":"You can integrate howdoi as a code editor extension. For this, you need to edit the files within the extension/code-editor-integration folder. To improve the Visual Studio Code howdoi extension, edit the files within the extension/vscode-howdoi folder and republish the extension.","title":"Extension development"},{"location":"extension_dev/#how-to-integrate-howdoi-as-a-code-editor-extension","text":"The Code Editor Integration plug-in runs when you call runHowdoi function which takes in a user\u2019s query(type = string). The parameter is encapsulated by a single line comment and is formatted as : // howdoi query runHowdoi function returns and Object which looks like : { Question: string Answer : string[] Link : string[] } What are these object values? question : it contains the user\u2019s query encapsulated by a single line comment answer : contains the three possible answers to the user\u2019s query. link : link contains the three possible links to the answer encapsulated by a single line comment To start with development, you need to first install howdoi on your machine. Steps to do that lie here.","title":"How to integrate howdoi as a code editor extension?"},{"location":"extension_dev/#development","text":"Next, install all important packages by running npm install To compile the script, run npm run compile To run the script , run npm start To compile and run the script, run npm run build To run the testing script, run npm test Now, to utilize the plug-in to create a howdoi extension, you need to do the following","title":"Development"},{"location":"extension_dev/#integration","text":"To use the plug-in to create a howdoi extension, follow these steps: Copy the code-editor-integration folder in your workspace and remove node-modules folder. You can do this by adding the script in your package.json file and running it. But, first you will need to install ncp and rimraf.: \"copy\": \"ncp ../code-editor-integration/ src/code-editor-integration/\" \"clean\": \"rimraf ./src/code-editor-integration/node_modules\" Import the plugin.ts file into your main file. Call the runHowdoi function.","title":"Integration"},{"location":"extension_dev/#visual-code-extension-development","text":"To begin the development for Visual Studio Code extension, install all the necessary packages: npm install Then precompile the extension : npm run precompile To run and test extension, utilize the Visual Studio Code\u2019s debugging tools.","title":"Visual Code Extension development"},{"location":"howdoi_advanced_usage/","text":"Howdoi stashing feature - We agree that sometimes you need to need search results for later and running the same query again and again won\u2019t be that feasible. Hence, Howdoi has a stashing feature which allows you to save your query, view the query, delete the saved results and even empty the entire stash ! (see keep documentation for more information on stashing). Here is how you can do this: stashing: howdoi --save QUERY viewing: howdoi --view removing: howdoi --remove (will be prompted which answer to delete) emptying: howdoi --empty (empties entire stash, will be prompted to confirm) Shortcuts for your parameters - You might run the same parameters many times and again, typing them isn\u2019t always the best option. You can use shortcuts for your parameters by using something like: $ alias h='function hdi(){ howdoi $* -c -n 5; }; hdi' And the in your command line, replace your parameters with your alias i.e. h: $ h format date bash Other uses and aliases - You can also search other StackExchange properties for answers. Example: $ HOWDOI_URL=cooking.stackexchange.com $ howdoi make pesto Or use an alias for the same : $ alias hcook='function hcook(){ HOWDOI_URL=cooking.stackexchange.com howdoi $* ; }; hcook' $ hcook make pesto Setting up environment variables - Howdoi uses some environment variables which can be configured by the user as per his/her choice. The following are the environment variables and their usage : HOWDOI_COLORIZE=1 - Colorizes the output produced. HOWDOI_DISABLE_CACHE=1 - Disables the Caching functionality. Howdoi uses a cache for faster access to previous questions. The cache is stored in ~/.cache/howdoi. HOWDOI_DISABLE_SSL=1 - Disables the SSL certificate. HOWDOI_SEARCH_ENGINE=google - Changes the search engine to your preference (default: google, also supported: bing, duckduckgo). The -e flag will switch the underlying engine for a single query. HOWDOI_URL=serverfault.com - Changes the source url for answers (default: stackoverflow.com, also supported: serverfault.com, pt.stackoverflow.com, full list).","title":"Howdoi advanced usage"},{"location":"introduction/","text":"Howdoi is an open source command line tool that gives answers to your questions right on the command line. Howdoi can be used by anyone and everyone who finds themselves Googling for answers to their basic programming questions. You wonder: howdoi print hello in python We answer: print(\u201chello\u201d) Installation \u00b6 You'll need: pip Python 3.7 or above. Python 2.7 support is discontinued. To install howdoi: pip install howdoi Or pip install git+https://github.com/gleitz/howdoi.git#egg=howdoi Don't have pip installed yet? Follow this simple tutorial to get started If you want to use setuptools to install howdoi you can do so like this: python setup.py install","title":"Introduction"},{"location":"introduction/#installation","text":"You'll need: pip Python 3.7 or above. Python 2.7 support is discontinued. To install howdoi: pip install howdoi Or pip install git+https://github.com/gleitz/howdoi.git#egg=howdoi Don't have pip installed yet? Follow this simple tutorial to get started If you want to use setuptools to install howdoi you can do so like this: python setup.py install","title":"Installation"},{"location":"troubleshooting/","text":"You might get the following error when installing with Homebrew: == > python setup.py install http://peak.telecommunity.com/EasyInstall.html Please make the appropriate changes for your system and try again. Fix the error by executing the following command: sudo chmod -R go+w /Library/Python/2.7/site-packages/ An official lxml for python 3.3+ for windows has not yet been released. You may get an error while installing. Try and install an unofficial binary for lxml .","title":"Troubleshooting"},{"location":"usage/","text":"Let's start at the beginning. $ howdoi howdoi For further information about flags and environment variables: $ howdoi -h Howdoi Flags and Arguments \u00b6 usage: howdoi [-h] [-p POS] [-n NUM] [-a] [-l] [-c] [-x] [-C] [-j] [-v] [-e [ENGINE]] [--save] [--view] [--remove] [--empty] [QUERY ...] instant coding answers via the command line positional arguments: QUERY the question to answer optional arguments: -h, --help show this help message and exit -p POS, --pos POS select answer in specified position (default: 1) -n NUM, --num NUM number of answers to return (default: 1) -a, --all display the full text of the answer -l, --link display only the answer link -c, --color enable colorized output -x, --explain explain how answer was chosen -C, --clear-cache clear the cache -j, --json return answers in raw json format -v, --version display the current version of howdoi -e [ENGINE], --engine [ENGINE] search engine for this query (google, bing, duckduckgo) --save, --stash stash a howdoi answer --view view your stash --remove remove an entry in your stash --empty empty your stash environment variable examples: HOWDOI_COLORIZE=1 HOWDOI_DISABLE_CACHE=1 HOWDOI_DISABLE_SSL=1 HOWDOI_SEARCH_ENGINE=google HOWDOI_URL=serverfault.com","title":"Usage"},{"location":"usage/#howdoi-flags-and-arguments","text":"usage: howdoi [-h] [-p POS] [-n NUM] [-a] [-l] [-c] [-x] [-C] [-j] [-v] [-e [ENGINE]] [--save] [--view] [--remove] [--empty] [QUERY ...] instant coding answers via the command line positional arguments: QUERY the question to answer optional arguments: -h, --help show this help message and exit -p POS, --pos POS select answer in specified position (default: 1) -n NUM, --num NUM number of answers to return (default: 1) -a, --all display the full text of the answer -l, --link display only the answer link -c, --color enable colorized output -x, --explain explain how answer was chosen -C, --clear-cache clear the cache -j, --json return answers in raw json format -v, --version display the current version of howdoi -e [ENGINE], --engine [ENGINE] search engine for this query (google, bing, duckduckgo) --save, --stash stash a howdoi answer --view view your stash --remove remove an entry in your stash --empty empty your stash environment variable examples: HOWDOI_COLORIZE=1 HOWDOI_DISABLE_CACHE=1 HOWDOI_DISABLE_SSL=1 HOWDOI_SEARCH_ENGINE=google HOWDOI_URL=serverfault.com","title":"Howdoi Flags and Arguments"},{"location":"windows-contributing/","text":"Setting up a Windows Development environment \u00b6 Howdoi can be used on Windows, MacOS and Linux etc. But the development environment can only be set up in a Linux or Mac. To set up the development environment in Windows, follow the following steps: Install WSL \u00b6 WSL is Windows Subsystem for Linux. It offers Linux interoperability in Windows and allows users to set up a virtual environment. If you do not have WSL set up, follow the steps in this tutorial Setting up the virtual environment \u00b6 After setting up WSL, go to the directory where you want to set up Howdoi. Open the Command Prompt here and enter the following to enter the WSL environment. bash Now you are using the Linux-compatible kernel on Windows and can set up a virtual environment. Clone the git repository \u00b6 $ git clone https://github.com/gleitz/howdoi.git Setup and activate a virtual environment: $ python3 -m venv .venv $ source .venv/bin/activate Make sure you have pip installed, if not, enter: $ sudo apt install python3-pip Go to the project directory and install requirements: $ cd howdoi $ pip install -r requirements.txt if howdoi does not process queries after this command, make sure your PATH variables for Python and Pip are set correctly in Windows environment variables. Test run \u00b6 Check to see if everything has been set-up correctly: pip install howdoi howdoi print hello world","title":"Development for Windows"},{"location":"windows-contributing/#setting-up-a-windows-development-environment","text":"Howdoi can be used on Windows, MacOS and Linux etc. But the development environment can only be set up in a Linux or Mac. To set up the development environment in Windows, follow the following steps:","title":"Setting up a Windows Development environment"},{"location":"windows-contributing/#install-wsl","text":"WSL is Windows Subsystem for Linux. It offers Linux interoperability in Windows and allows users to set up a virtual environment. If you do not have WSL set up, follow the steps in this tutorial","title":"Install WSL"},{"location":"windows-contributing/#setting-up-the-virtual-environment","text":"After setting up WSL, go to the directory where you want to set up Howdoi. Open the Command Prompt here and enter the following to enter the WSL environment. bash Now you are using the Linux-compatible kernel on Windows and can set up a virtual environment.","title":"Setting up the virtual environment"},{"location":"windows-contributing/#clone-the-git-repository","text":"$ git clone https://github.com/gleitz/howdoi.git Setup and activate a virtual environment: $ python3 -m venv .venv $ source .venv/bin/activate Make sure you have pip installed, if not, enter: $ sudo apt install python3-pip Go to the project directory and install requirements: $ cd howdoi $ pip install -r requirements.txt if howdoi does not process queries after this command, make sure your PATH variables for Python and Pip are set correctly in Windows environment variables.","title":"Clone the git repository"},{"location":"windows-contributing/#test-run","text":"Check to see if everything has been set-up correctly: pip install howdoi howdoi print hello world","title":"Test run"}]}